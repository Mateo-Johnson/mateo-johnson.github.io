[
  {
    "title": "Dual-MCU Circuit Boards",
    "description": "A set of dual-MCU boards, named the EDGE-A and EDGE-B using UART communication between an ESP32-S3 chip and a RP2354B / Kendryte K210 depending on the model. These boards have integrated sensor arrays containing IMUs, Microphones, ToF and dual inbuilt DC motor controllers. These systems saw significant gains when compared to single-MCU microcontrollers. The research paper can be found <a href='https://mateo-johnson.github.io/resources/dualMCUreport.pdf' target='_blank'>here</a>. This project will be participating in Buckeye Science & Engineering Fair 2026 and Regeneron Science Talent Search 2025.",
    "image": "https://mateo-johnson.github.io/resources/dualMCUcoverimage.png",
    "tags": [
      "Embedded Systems",
      "KiCAD",
      "EasyEDA",
      "ESP32",
      "K210",
      "Microcontrollers",
      "Edge Computing"
    ],
    "link": "https://github.com/Mateo-Johnson/ISEF26",
    "code": [
      {
        "language": "C++",
        "snippet": "#include <HardwareSerial.h>\n\nHardwareSerial mySerial(1); // use UART1\n\n// Pin assignments \n#define RX_PIN   9\n#define TX_PIN   10\n#define RTS_PIN  7\n#define CTS_PIN  8\n\nvoid setup() {\n  Serial.begin(115200);\n\n  // Start UART1 with flow control\n  mySerial.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN, true, RTS_PIN, CTS_PIN);\n\n  Serial.println(\"ESP32-S3 UART (with RTS/CTS) Ready\");\n}\n\nvoid loop() {\n  // Send test data\n  String message = \"Sensor packet: IMU_AX=0.12\\n\";\n  mySerial.print(message);\n\n  // Listen for response\n  if (mySerial.available()) {\n    String response = mySerial.readStringUntil('\\n');\n    Serial.println(\"Got from MCU: \" + response);\n  }\n\n  delay(1000);\n}\n"
      }
    ]
  },
  {
 "title": "Compact ESP32 Development Board",
 "description": "An ultra-compact ESP32-S3 development board designed to be approximately the size of a penny while maintaining full functionality. This miniaturized board demonstrates advanced PCB design principles, component selection optimization, and space-efficient layout techniques. The project showcases expertise in high-density circuit design, signal integrity monitoring, and manufacturing constraints for small-form-factor electronics. Features include all essential GPIO breakouts, an integrated IMU, USB-C programming interface, and integrated antenna design within the compact footprint.",
 "image": "http://mateo-johnson.github.io/resources/2025_08_28_0o8_Kleki.png",
 "tags": [
   "PCB Design",
   "ESP32",
   "Miniaturization",
   "KiCAD",
   "Embedded Systems",
   "IoT",
   "Hardware Design"
 ],
 "link": "https://github.com/Mateo-Johnson/penny-esp32",
 "code": [
   {
     "language": "C++",
     "snippet": "// Penny ESP32 - Blink Example\n// Demonstrates basic functionality on ultra-compact board\n\n#define LED_PIN 2\n#define BUTTON_PIN 0\n\nvoid setup() {\n  Serial.begin(115200);\n  pinMode(LED_PIN, OUTPUT);\n  pinMode(BUTTON_PIN, INPUT_PULLUP);\n  \n  Serial.println(\"Penny ESP32 - Ultra Compact Board Ready!\");\n  Serial.printf(\"Board Size: ~19mm diameter\\n\");\n}\n\nvoid loop() {\n  // Simple blink with button control\n  if (digitalRead(BUTTON_PIN) == LOW) {\n    digitalWrite(LED_PIN, HIGH);\n    Serial.println(\"LED ON - Button Pressed\");\n    delay(100);\n  } else {\n    digitalWrite(LED_PIN, LOW);\n    delay(500);\n  }\n  \n  // Demonstrate WiFi capability\n  static unsigned long lastWiFiCheck = 0;\n  if (millis() - lastWiFiCheck > 5000) {\n    Serial.printf(\"WiFi Status: %s\\n\", WiFi.status() == WL_CONNECTED ? \"Connected\" : \"Disconnected\");\n    lastWiFiCheck = millis();\n  }\n}"
   }
 ]
},
  {
    "title": "Differential Swerve Drive Module",
    "description": "A robotics project using CAD design, 3D printing and CNC machining to create a fully functional differential swerve drive module from scratch, as well as Java programming to implement autonomous navigation with the system, using real time rotary and motor encoder feedback. Calculus-based kinematics and physics principles were applied to optimize movement and turning.",
    "image": "https://mateo-johnson.github.io/resources/diffSwervecoverimage.png",
    "tags": [
      "Robotics",
      "FRC",
      "CAD",
      "Microcontrollers",
      "Swerve Drive"
    ],
    "link": "https://github.com/yourusername/swerve-drive-robot",
    "code": []
  },
  {
    "title": "Rocket Stabilization System",
    "description": "A custom flight control system for model rockets, using a GY-521 IMU in addition to other sensors to maintain stability in flight. Consisted of a custom SAMD21 control board, sensor array and TVC gimbal. Built with principles from OSU Physics and Engineering courses. This project participated in Buckeye Science & Engineering Fair 2025 as well as Regeneron International Science & Engineering Fair 2025.",
    "image": "https://mateo-johnson.github.io/resources/rocketcoverimage.png",
    "tags": [
      "Embedded Systems",
      "Aerospace",
      "Microcontrollers",
      "IMU",
      "PID Control",
      "CAD"
    ],
    "link": "https://github.com/yourusername/rocket-stabilization-system",
    "code": []
  },
  {
    "title": "DIY Pick-and-Place Machine",
    "description": "A custom-built pick-and-place machine for electronics assembly. Designed for automated toolhead switching and precision control.",
    "image": "https://blocks.astratic.com/img/general-img-landscape.png",
    "tags": [
      "Embedded Systems",
      "PCB Design",
      "Robotics",
      "Automation",
      "CAD"
    ],
    "link": "https://github.com/yourusername/pnp-machine",
    "code": []
  }
]
